% Input: cspace -> NxN matrix: cspace(i,j)
%                  == 1 if [q_grid(i); q_grid(j)] is in collision,
%                  == 0 otherwise
% Output: padded_cspace -> NxN matrix: padded_cspace(i,j)
%                          == 1 if cspace(i,j) == 1, or some neighbor of
%                                  cell (i,j) has value 1 in cspace
%                                  (including diagonal neighbors)
%                          == 0 otherwise

function padded_cspace = C7(cspace)
    adjacent = [ 1 -1; 1 0; 1 1; 0 -1; 0 0; 0 1; -1 -1; -1 0; -1 1 ];
    for i=1:size(cspace,1)
        for j=1:size(cspace,1)
            for k=1:size(adjacent,1)
                adj = adjacent(k,:);
                x_adj = uint8(adj(1));
                y_adj = uint8(adj(2));
%                 disp(class(x_adj));
%                 disp(y_adj);
%                 disp(cspace(i,j));
                if (cspace(i + x_adj,j + y_adj) == 1) && (cspace(i,j) == 0)
                    if min(i + x_adj, j + y_adj) < 2
                        continue
                    end
                    if  > 100
                        continue
                    end
                    if j + y_adj > 100
                        continue
                    end
                    cspace(i,j) = 2;
                end
            
                    
            end
        end
    end
    for i=1:size(cspace,1)
        for j=1:size(cspace,1)
            if (cspace(i,j) == 2)
                cspace(i,j) = 1;
            end
        end
    end
    padded_cspace = cspace
    
end